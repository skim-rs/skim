[workspace]
allow_dirty = false
changelog_update = false
dependencies_update = false
git_release_enable = false
git_tag_enable = false
pr_branch_prefix = "release-plz-"
pr_labels = ["release"]
pr_name = "chore: release"
publish = false
publish_no_verify = true
release_commits = "^(feat|fix)[:(]"
semver_check = true

features_always_increment_minor = true

[[package]]
name = "skim"
publish = true
publish_no_verify = false
changelog_include = [
	"skim",
	"shell",
	"plugin",
	"bin",
	"xtask",
	"common",
	"e2e",
	"tuikit"
]
changelog_path = "./CHANGELOG.md"
changelog_update = true
git_tag_enable = true
git_release_enable = true
git_tag_name = "v{{ version }}"

[[package]]
name = "e2e"
release = false
[[package]]
name = "tuikit"
release = false
[[package]]
name = "common"
release = false
[[package]]
name = "common"
release = false

[changelog]
header = """# Changelog

## [Unreleased]
"""

body = """

{%- macro username(commit) -%}
    {% if commit.remote.username %} (by @{{ commit.remote.username }}){% endif -%}
{% endmacro -%}
{%- macro pr(commit) -%}
    {% if commit.remote.pr_number %} - #{{ commit.remote.pr_number }}{% endif -%}
{% endmacro -%}
{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
      {% if commit.breaking %}[**breaking**] {% endif %}\
      {{ commit.message | upper_first }} - \
      ([{{ commit.id | truncate(length=7, end="") }}]({{ remote.link }}/commit/{{ commit.id }}))\
			{{ self::username(commit=commit) }}\
      {{ self::pr(commit=commit) }}\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version }}]({{ release_link }})
    {% else %}\
        ## [{{ version }}]
    {% endif %}\
{% endif %}\

{% for group, commits in commits
| filter(attribute="merge_commit", value=false)
| unique(attribute="message")
| group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}

    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n

{%- if remote.contributors %}
### Contributors
{% for contributor in remote.contributors %}
    * @{{ contributor.username }}
{%- endfor %}
{% endif -%}
"""

commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->⛰️ Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor\\(clippy\\)", skip = true },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore\\(release\\):", skip = true },
  { message = "^chore: release", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]

link_parsers = [
  { pattern = "#(\\d+)", href = "{{ remote.link }}/issues/$1" },
  { pattern = "RFC(\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1" },
]
