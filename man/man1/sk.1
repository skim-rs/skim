.ie \n(.g .ds Aq \(aq
.el .ds Aq '
.TH sk 1  "sk 0.17.1" 
.SH NAME
sk \- sk \- fuzzy finder in Rust
.SH SYNOPSIS
\fBsk\fR [\fB\-\-tac\fR] [\fB\-\-no\-sort\fR] [\fB\-t\fR|\fB\-\-tiebreak\fR] [\fB\-n\fR|\fB\-\-nth\fR] [\fB\-\-with\-nth\fR] [\fB\-d\fR|\fB\-\-delimiter\fR] [\fB\-e\fR|\fB\-\-exact\fR] [\fB\-\-regex\fR] [\fB\-\-algo\fR] [\fB\-\-case\fR] [\fB\-b\fR|\fB\-\-bind\fR] [\fB\-m\fR|\fB\-\-multi\fR] [\fB\-\-no\-multi\fR] [\fB\-\-no\-mouse\fR] [\fB\-c\fR|\fB\-\-cmd\fR] [\fB\-i\fR|\fB\-\-interactive\fR] [\fB\-I \fR] [\fB\-\-color\fR] [\fB\-\-no\-hscroll\fR] [\fB\-\-keep\-right\fR] [\fB\-\-skip\-to\-pattern\fR] [\fB\-\-no\-clear\-if\-empty\fR] [\fB\-\-no\-clear\-start\fR] [\fB\-\-no\-clear\fR] [\fB\-\-show\-cmd\-error\fR] [\fB\-\-layout\fR] [\fB\-\-reverse\fR] [\fB\-\-height\fR] [\fB\-\-no\-height\fR] [\fB\-\-min\-height\fR] [\fB\-\-margin\fR] [\fB\-p\fR|\fB\-\-prompt\fR] [\fB\-\-cmd\-prompt\fR] [\fB\-\-ansi\fR] [\fB\-\-tabstop\fR] [\fB\-\-info\fR] [\fB\-\-no\-info\fR] [\fB\-\-inline\-info\fR] [\fB\-\-header\fR] [\fB\-\-header\-lines\fR] [\fB\-\-history\fR] [\fB\-\-history\-size\fR] [\fB\-\-cmd\-history\fR] [\fB\-\-cmd\-history\-size\fR] [\fB\-\-preview\fR] [\fB\-\-preview\-window\fR] [\fB\-q\fR|\fB\-\-query\fR] [\fB\-\-cmd\-query\fR] [\fB\-\-expect\fR] [\fB\-\-read0\fR] [\fB\-\-print0\fR] [\fB\-\-print\-query\fR] [\fB\-\-print\-cmd\fR] [\fB\-\-print\-score\fR] [\fB\-1\fR|\fB\-\-select\-1\fR] [\fB\-0\fR|\fB\-\-exit\-0\fR] [\fB\-\-sync\fR] [\fB\-\-pre\-select\-n\fR] [\fB\-\-pre\-select\-pat\fR] [\fB\-\-pre\-select\-items\fR] [\fB\-\-pre\-select\-file\fR] [\fB\-f\fR|\fB\-\-filter\fR] [\fB\-\-tmux\fR] [\fB\-h\fR|\fB\-\-help\fR] [\fB\-V\fR|\fB\-\-version\fR] 
.SH DESCRIPTION
sk \- fuzzy finder in Rust
.PP
sk is a general purpose command\-line fuzzy finder.
.PP
ENVIRONMENT VARIABLES
.PP
SKIM_DEFAULT_COMMAND
.PP
Default command to use when input is tty. On *nix systems, sk runs the command with sh \-c, so make  sure  that it\*(Aqs POSIX\-compliant.
.PP
SKIM_DEFAULT_OPTIONS
.PP
Default options. e.g. export SKIM_DEFAULT_OPTIONS="\-\-multi"
.PP
EXTENDED SEARCH MODE
.PP
Unless specified otherwise, sk will start in "extended\-search mode". In this mode, you can specify multiple  patterns delimited by spaces, such as: \*(Aqwild ^music .mp3$ sbtrkt !rmx
.PP
You can prepend a backslash to a space (\\ ) to match a literal space character.
.PP
Exact\-match (quoted)
.PP
A term that is prefixed by a single\-quote character (\*(Aq) is interpreted as an "exact\-match" (or "non\-fuzzy") term. sk will search for the exact occurrences of the string.
.PP
Anchored\-match
.PP
A term can be prefixed by ^, or suffixed by $ to become an anchored\-match term. Then sk will  search  for  the  lines that start with or end with the given string. An anchored\-match term is also an exact\-match term.
.PP
Negation
.PP
If  a  term  is prefixed by !, sk will exclude the lines that satisfy the term from the result. In this case, sk per‐ forms exact match by default.
.PP
Exact\-match by default
.PP
If you don\*(Aqt prefer fuzzy matching and do not wish to "quote" (prefixing with \*(Aq) every word, start sk with \-e or \-\-exact option. Note that when \-\-exact is set, \*(Aq\-prefix "unquotes" the term.
.PP
OR operator
.PP
A  single bar character term acts as an OR operator. For example, the following query matches entries that start with core and end with either go, rb, or py.
.PP
Example: ^core go$ | rb$ | py$
.PP
EXIT STATUS
.PP
\- 0:      Normal exit
.PP
\- 1:      No match
.PP
\- 2:      Error
.PP
\- 130:    Interrupted with CTRL\-C or ESC
.SH OPTIONS
.TP
\fB\-h\fR, \fB\-\-help\fR
Print help (see a summary with \*(Aq\-h\*(Aq)
.TP
\fB\-V\fR, \fB\-\-version\fR
Print version
.SH SEARCH
.TP
\fB\-\-tac\fR
Show results in reverse order

Often used in combination with \-\-no\-sort
.TP
\fB\-\-no\-sort\fR
Do not sort the results

Often used in combination with \-\-tac

Example: history | sk \-\-tac \-\-no\-sort
.TP
\fB\-t\fR, \fB\-\-tiebreak\fR=\fITIEBREAK\fR [default: score,begin,end]
Comma\-separated list of sort criteria to apply when the scores are tied.

\- score: Score of the fuzzy match algorithm

\- index: Prefers line that appeared earlier in the input stream

\- begin: Prefers line with matched substring closer to the beginning

\- end: Prefers line with matched substring closer to the end

\- length: Prefers line with shorter length

Notes:

\- Each criterion could be negated, e.g. (\-index)

\- Each criterion should appear only once in the list
.br

.br
[\fIpossible values: \fRscore, \-score, begin, \-begin, end, \-end, length, \-length, index, \-index]
.TP
\fB\-n\fR, \fB\-\-nth\fR=\fINTH\fR [default: ]
Fields to be matched

A field index expression can be a non\-zero integer or a range expression ([BEGIN]..[END]). \-\-nth and \-\-with\-nth take a comma\-separated list of field index expressions.

Examples:

\- 1:      The 1st field

\- 2:      The 2nd field

\- \-1:     The last field

\- \-2:     The 2nd to last field

\- 3..5:   From the 3rd field to the 5th field

\- 2..:    From the 2nd field to the last field

\- ..\-3:   From the 1st field to the 3rd to the last field

\- ..:     All the fields
.TP
\fB\-\-with\-nth\fR=\fIWITH_NTH\fR [default: ]
Fields to be transformed

See nth for the details
.TP
\fB\-d\fR, \fB\-\-delimiter\fR=\fIDELIMITER\fR [default: [\\t\\n ]+]
Delimiter between fields

In regex format, default to AWK\-style
.TP
\fB\-e\fR, \fB\-\-exact\fR
Run in exact mode
.TP
\fB\-\-regex\fR
Start in regex mode instead of fuzzy\-match
.TP
\fB\-\-algo\fR=\fIALGORITHM\fR [default: skim_v2]
Fuzzy matching algorithm

\- skim_v2: Latest skim algorithm, should be better in almost any case

\- skim_v1: Legacy skim algorithm

\- clangd: Used in clangd for keyword completion
.br

.br
[\fIpossible values: \fRskim_v1, skim_v2, clangd]
.TP
\fB\-\-case\fR=\fICASE\fR [default: smart]
Case sensitivity

Determines whether or not to ignore case while matching
.br

.br
[\fIpossible values: \fRrespect, ignore, smart]
.SH INTERFACE
.TP
\fB\-b\fR, \fB\-\-bind\fR=\fIBIND\fR
Comma separated list of bindings

You can customize key bindings of sk with \-\-bind option which takes a  comma\-separated  list  of key binding expressions. Each key binding expression follows the following format: <key>:<action>

Example: sk \-\-bind=ctrl\-j:accept,ctrl\-k:kill\-line

AVAILABLE KEYS: (SYNONYMS)

\- ctrl\-[a\-z]

\- ctrl\-space

\- ctrl\-alt\-[a\-z]

\- alt\-[a\-zA\-Z]

\- alt\-[0\-9]

\- f[1\-12]

\- enter       (ctrl\-m)

\- space

\- bspace      (bs)

\- alt\-up

\- alt\-down

\- alt\-left

\- alt\-right

\- alt\-enter   (alt\-ctrl\-m)

\- alt\-space

\- alt\-bspace  (alt\-bs)

\- alt\-/

\- tab

\- btab        (shift\-tab)

\- esc

\- del

\- up

\- down

\- left

\- right

\- home

\- end

\- pgup        (page\-up)

\- pgdn        (page\-down)

\- shift\-up

\- shift\-down

\- shift\-left

\- shift\-right

\- alt\-shift\-up

\- alt\-shift\-down

\- alt\-shift\-left

\- alt\-shift\-right

\- any single character

ACTION: DEFAULT BINDINGS [NOTES]

\- abort: ctrl\-c  ctrl\-q  esc

\- accept(...): enter the argument will be printed when the binding is triggered

\- append\-and\-select:

\- backward\-char: ctrl\-b  left

\- backward\-delete\-char: ctrl\-h  bspace

\- backward\-kill\-word: alt\-bs

\- backward\-word: alt\-b   shift\-left

\- beginning\-of\-line: ctrl\-a  home

\- clear\-screen: ctrl\-l

\- delete\-char: del

\- delete\-charEOF: ctrl\-d

\- deselect\-all:

\- down: ctrl\-j  ctrl\-n  down

\- end\-of\-line: ctrl\-e  end

\- execute(...): see below for the details

\- execute\-silent(...): see below for the details

\- forward\-char: ctrl\-f  right

\- forward\-word: alt\-f   shift\-right

\- if\-non\-matched:

\- if\-query\-empty:

\- if\-query\-not\-empty:

\- ignore:

\- kill\-line:

\- kill\-word: alt\-d

\- next\-history: ctrl\-n with \-\-history or \-\-cmd\-history

\- page\-down: pgdn

\- page\-up: pgup

\- half\-page\-down:

\- half\-page\-up:

\- preview\-up: shift\-up

\- preview\-down: shift\-down

\- preview\-left:

\- preview\-right:

\- preview\-page\-down:

\- preview\-page\-up:

\- previous\-history: ctrl\-p with \-\-history or \-\-cmd\-history

\- reload(...):

\- select\-all:

\- toggle:

\- toggle\-all:

\- toggle+down: ctrl\-i  tab

\- toggle\-in: (\-\-layout=reverse ? toggle+up:  toggle+down)

\- toggle\-out: (\-\-layout=reverse ? toggle+down:  toggle+up)

\- toggle\-preview:

\- toggle\-preview\-wrap:

\- toggle\-sort:

\- toggle+up: btab    shift\-tab

\- unix\-line\-discard: ctrl\-u

\- unix\-word\-rubout: ctrl\-w

\- up: ctrl\-k  ctrl\-p  up

\- yank: ctrl\-y

Multiple actions can be chained using + separator.

Example: sk \-\-bind \*(Aqctrl\-a:select\-all+accept\*(Aq

Special behaviors

With execute(...) and reload(...) action, you can execute arbitrary commands without leaving sk. For example, you can turn sk into a simple file browser by binding enter key to less command like follows:

  sk \-\-bind "enter:execute(less {})"

Note: if no argument is supplied to reload, the default command is run.

You can use the same placeholder expressions as in \-\-preview.

If the command contains parentheses, sk may fail to parse the expression. In that case, you  can use any of the following alternative notations to avoid parse errors.

\- execute[...]

\- execute\*(Aq...\*(Aq

\- execute"..."

\- execute:...

This is the special form that frees you from parse errors as it does not expect the clos‐ ing character. The catch is that it should be the last one in the comma\-separated list of key\-action pairs.

sk  switches  to  the  alternate screen when executing a command. However, if the command is ex‐ pected to complete quickly, and you are not interested in its output, you might want to use exe‐ cute\-silent instead, which silently executes the command without the  switching.  Note  that  sk will  not  be  responsive  until the command is complete. For asynchronous execution, start your command as a background process (i.e. appending &).

With if\-query\-empty and if\-query\-not\-empty action, you could specify the action to  execute  de‐ pends on the query condition. For example:

sk \-\-bind \*(Aqctrl\-d:if\-query\-empty(abort)+delete\-char\*(Aq

If  the query is empty, skim will execute abort action, otherwise execute delete\-char action. It is equal to ‘delete\-char/eof‘.
.TP
\fB\-m\fR, \fB\-\-multi\fR
Enable multiple selection

Uses Tab and S\-Tab by default for selection
.TP
\fB\-\-no\-multi\fR
Disable multiple selection
.TP
\fB\-\-no\-mouse\fR
Disable mouse
.TP
\fB\-c\fR, \fB\-\-cmd\fR=\fICMD\fR
Command to invoke dynamically in interactive mode

Will be invoked using sh \-c
.TP
\fB\-i\fR, \fB\-\-interactive\fR
Run in interactive mode
.TP
\fB\-I\fR=\fIREPLSTR\fR [default: {}]
Replace replstr with the selected item in commands
.TP
\fB\-\-color\fR=\fICOLOR\fR
Set color theme

Format: [BASE][,COLOR:ANSI]
.TP
\fB\-\-no\-hscroll\fR
Disable horizontal scroll
.TP
\fB\-\-keep\-right\fR
Keep the right end of the line visible on overflow

Effective only when the query string is empty
.TP
\fB\-\-skip\-to\-pattern\fR=\fISKIP_TO_PATTERN\fR
Show the matched pattern at the line start

Line  will  start  with  the  start of the matched pattern. Effective only when the query string is empty. Was designed to skip showing starts of paths of rg/grep results.

Example: sk \-i \-c "rg {} \-\-color=always" \-\-skip\-to\-pattern \*(Aq[^/]*:\*(Aq \-\-ansi
.TP
\fB\-\-no\-clear\-if\-empty\fR
Do not clear previous line if the command returns an empty result

Do not clear previous items if new command returns empty result. This might be useful  to reduce flickering when typing new commands and the half\-complete commands are not valid.

This is not default however because similar usecases for grep and rg had already been op‐ timized  where  empty  result  of  a query do mean "empty" and previous results should be cleared.
.TP
\fB\-\-no\-clear\-start\fR
Do not clear items on start
.TP
\fB\-\-no\-clear\fR
Do not clear screen on exit

Do not clear finder interface on exit. If skim was started in full screen mode, it will not switch back to the original  screen, so you\*(Aqll have to manually run tput rmcup to return. This option can be used to avoid flickering of the screen when your application needs to start skim multiple times in order.
.TP
\fB\-\-show\-cmd\-error\fR
Show error message if command fails
.SH LAYOUT
.TP
\fB\-\-layout\fR=\fILAYOUT\fR [default: default]
Set layout

*default: Display from the bottom of the screen

*reverse: Display from the top of the screen

*reverse\-list: Display from the top of the screen, prompt at the bottom
.br

.br
[\fIpossible values: \fRdefault, reverse, reverse\-list]
.TP
\fB\-\-reverse\fR
Shorthand for reverse layout
.TP
\fB\-\-height\fR=\fIHEIGHT\fR [default: 100%]
Height of skim\*(Aqs window

Can either be a row count or a percentage
.TP
\fB\-\-no\-height\fR
Disable height feature
.TP
\fB\-\-min\-height\fR=\fIMIN_HEIGHT\fR [default: 10]
Minimum height of skim\*(Aqs window

Useful when the height is set as a percentage

Ignored when \-\-height is not specified
.TP
\fB\-\-margin\fR=\fIMARGIN\fR [default: 0]
Screen margin

For each side, can be either a row count or a percentage of the terminal size

Format can be one of:

\- TRBL

\- TB,RL

\- T,RL,B

\- T,R,B,L

Example: 1,10%
.TP
\fB\-p\fR, \fB\-\-prompt\fR=\fIPROMPT\fR [default: > ]
Set prompt
.TP
\fB\-\-cmd\-prompt\fR=\fICMD_PROMPT\fR [default: c> ]
Set prompt in command mode
.SH DISPLAY
.TP
\fB\-\-ansi\fR
Parse ANSI color codes in input strings
.TP
\fB\-\-tabstop\fR=\fITABSTOP\fR [default: 8]
Number of spaces that make up a tab
.TP
\fB\-\-info\fR=\fIINFO\fR [default: default]
Set matching result count display position

\- hidden: do not display info
\- inline: display info in the same row as the input
\- default: display info in a dedicated row above the input
.br

.br
[\fIpossible values: \fRdefault, inline, hidden]
.TP
\fB\-\-no\-info\fR
Alias for \-\-info=hidden
.TP
\fB\-\-inline\-info\fR
Alias for \-\-info=inline
.TP
\fB\-\-header\fR=\fIHEADER\fR
Set header, displayed next to the info

The  given  string  will  be printed as the sticky header. The lines are displayed in the given order from top to bottom regardless of \-\-layout option, and  are  not  affected  by \-\-with\-nth. ANSI color codes are processed even when \-\-ansi is not set.
.TP
\fB\-\-header\-lines\fR=\fIHEADER_LINES\fR [default: 0]
Number of lines of the input treated as header

The  first N lines of the input are treated as the sticky header. When \-\-with\-nth is set, the lines are transformed just like the other lines that follow.
.TP
\fB\-\-tmux\fR=\fITMUX\fR
Run in a tmux popup

Format: sk \-\-tmux <center|top|bottom|left|right>[,SIZE[%]][,SIZE[%]]

Depending on the direction, the order and behavior of the sizes varies:

\- center: (width, height) or (size, size) if only one is provided

\- top | bottom: (height, width) or height = size, width = 100% if only one is provided

\- left | right: (width, height) or height = 100%, width = size if only one is provided

Note: env vars are only passed to the tmux command if they are either PATH or prefixed with RUST or SKIM
.SH HISTORY
.TP
\fB\-\-history\fR=\fIHISTORY_FILE\fR
History file

Load search history from the specified file and update the file on completion.

When enabled, CTRL\-N and CTRL\-P are automatically remapped to next\-history and previous\-history.
.TP
\fB\-\-history\-size\fR=\fIHISTORY_SIZE\fR [default: 1000]
Maximum number of query history entries to keep
.TP
\fB\-\-cmd\-history\fR=\fICMD_HISTORY_FILE\fR
Command history file

Load command query history from the specified file and update the file on completion.

When enabled, CTRL\-N and CTRL\-P are automatically remapped to next\-history and previous\-history.
.TP
\fB\-\-cmd\-history\-size\fR=\fICMD_HISTORY_SIZE\fR [default: 1000]
Maximum number of query history entries to keep
.SH PREVIEW
.TP
\fB\-\-preview\fR=\fIPREVIEW\fR
Preview command

Execute the given command for the current line and display the result on the preview window. {} in the command is the placeholder that is replaced to the single\-quoted string of the current line. To transform the replace‐ ment string, specify field index expressions between the braces (See FIELD INDEX EXPRESSION for the details).

Examples:

  sk \-\-preview=\*(Aqhead \-$LINES {}\*(Aq
  ls \-l | sk \-\-preview="echo user={3} when={\-4..\-2}; cat {\-1}" \-\-header\-lines=1

sk overrides $LINES and $COLUMNS so that they represent the exact size of the preview window.

A placeholder expression starting with + flag will be replaced to the space\-separated  list  of  the  selected lines (or the current line if no selection was made) individually quoted.

Examples:

  sk \-\-multi \-\-preview=\*(Aqhead \-10 {+}\*(Aq
  git log \-\-oneline | sk \-\-multi \-\-preview \*(Aqgit show {+1}\*(Aq

Note that you can escape a placeholder pattern by prepending a backslash.

Also, {q}  is replaced to the current query string. {cq} is replaced to the current command query string. {n} is replaced to zero\-based ordinal index of the line. Use {+n} if you want all index numbers when multiple lines are selected

Preview window will be updated even when there is no match for the current query if any of the placeholder ex‐ pressions evaluates to a non\-empty string.
.TP
\fB\-\-preview\-window\fR=\fIPREVIEW_WINDOW\fR [default: right:50%]
Preview window layout

Format: [up|down|left|right][:SIZE[%]][:hidden][:+SCROLL[\-OFFSET]]

Determine  the  layout of the preview window. If the argument ends with: hidden, the preview window will be hidden by default until toggle\-preview action is triggered. Long lines are truncated by default.  Line wrap can be enabled with : wrap flag.

If size is given as 0, preview window will not be visible, but sk will still execute the command in the background.

+SCROLL[\-OFFSET] determines the initial scroll offset of the preview window. SCROLL can be either a  numeric  integer or  a  single\-field index expression that refers to a numeric integer. The optional \-OFFSET part is for adjusting the base offset so that you can see the text above it. It should be given as a numeric integer (\-INTEGER), or as a denom‐ inator form (\-/INTEGER) for specifying a fraction of the preview window height.

Examples:

  # Non\-default scroll window positions and sizes
  sk \-\-preview="head {}" \-\-preview\-window=up:30%
  sk \-\-preview="file {}" \-\-preview\-window=down:2
  
  # Initial scroll offset is set to the line number of each line of
  # git grep output *minus* 5 lines (\-5)
  git grep \-\-line\-number \*(Aq\*(Aq |
    sk \-\-delimiter:  \-\-preview \*(Aqnl {1}\*(Aq \-\-preview\-window +{2}\-5
  
  # Preview with bat, matching line in the middle of the window (\-/2)
  git grep \-\-line\-number \*(Aq\*(Aq |
    sk \-\-delimiter:  \\
        \-\-preview \*(Aqbat \-\-style=numbers \-\-color=always \-\-highlight\-line {2} {1}\*(Aq \\
        \-\-preview\-window +{2}\-/2

.SH SCRIPTING
.TP
\fB\-q\fR, \fB\-\-query\fR=\fIQUERY\fR
Initial query
.TP
\fB\-\-cmd\-query\fR=\fICMD_QUERY\fR
Initial query in interactive mode
.TP
\fB\-\-expect\fR=\fIEXPECT\fR
[Deprecated: Use \-\-bind=<key>:accept(<key>) instead] Comma separated list of keys used to complete skim

Comma\-separated  list  of keys that can be used to complete sk in addition to the default enter key. When this option is set, sk will print the name of the key pressed as the first line of its output  (or  as  the  second line  if \-\-print\-query is also used). No line will be printed if sk is completed with the default enter key. If \-\-expect option is specified multiple times, sk will expect the union of the keys. \-\-no\-expect will clear  the list.

Example: sk \-\-expect=ctrl\-v,ctrl\-t,alt\-s \-\-expect=f1,f2,~,@
.TP
\fB\-\-read0\fR
Read input delimited by ASCII NUL(\\0) characters
.TP
\fB\-\-print0\fR
Print output delimited by ASCII NUL(\\0) characters
.TP
\fB\-\-print\-query\fR
Print the query as the first line
.TP
\fB\-\-print\-cmd\fR
Print the command as the first line (after print\-query)
.TP
\fB\-\-print\-score\fR
Print the command as the first line (after print\-cmd)
.TP
\fB\-1\fR, \fB\-\-select\-1\fR
Automatically select the match if there is only one
.TP
\fB\-0\fR, \fB\-\-exit\-0\fR
Automatically exit when no match is left
.TP
\fB\-\-sync\fR
Synchronous search for multi\-staged filtering

Synchronous search for multi\-staged filtering. If specified, skim will launch ncurses finder only after the input stream is complete.

Example: sk \-\-multi | sk \-\-sync
.TP
\fB\-\-pre\-select\-n\fR=\fIPRE_SELECT_N\fR [default: 0]
Pre\-select the first n items in multi\-selection mode
.TP
\fB\-\-pre\-select\-pat\fR=\fIPRE_SELECT_PAT\fR [default: ]
Pre\-select the matched items in multi\-selection mode

Check the doc for the detailed syntax: https://docs.rs/regex/1.4.1/regex/
.TP
\fB\-\-pre\-select\-items\fR=\fIPRE_SELECT_ITEMS\fR [default: ]
Pre\-select the items separated by newline character

Example: item1\\nitem2
.TP
\fB\-\-pre\-select\-file\fR=\fIPRE_SELECT_FILE\fR
Pre\-select the items read from this file
.TP
\fB\-f\fR, \fB\-\-filter\fR=\fIFILTER\fR
Query for filter mode
.SH VERSION
v0.17.1
